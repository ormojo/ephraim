import { typeOf } from './primitiveTypes'
import { typeFrom } from './type'
import createBehaviorSubject from 'observable-utils/lib/createBehaviorSubject'

export observedFieldsSymbol = Symbol.for("ephraim.observedFields")
export observableGhostSymbol = Symbol.for("ephraim.observableGhost")

isEmpty(obj) ->
  Object.keys(obj).length == 0

export observe(ent) ->
  if ent[observableGhostSymbol]: return ent[observableGhostSymbol]
  T = typeFrom(typeOf(ent))
  ent[observableGhostSymbol] = T.createObservableGhost(ent)

export getObservableForField(ent, k) ->
  // Get from cache
  let observedFields = ent[observedFieldsSymbol]
  if not observedFields:
    now observedFields = ent[observedFieldsSymbol] = {}
  let observable = observedFields[k]
  if observable: return observable

  // Create.
  // Primitive observable, when unsubbed, deletes itself, and then
  // the whole observedPrimitives key if empty
  opts = {
    initialValue: ent
    onObserversChanged(observers, added, removed) ->
      if removed and observers.length == 0:
        delete ent[observedFieldsSymbol][k]
        if ent[observedFieldsSymbol]~isEmpty!:
          ent[observedFieldsSymbol] = undefined
  }
  now observable = createBehaviorSubject(opts)

  // Cache and return
  observedFields[k] = observable
