import { typeOf } from './primitiveTypes'
import { typeFrom } from './type'

// Typecheck an assignment of val to a key of type T, throwing a standard
// error message if the typecheck fails.
export typeCheckAssignment(T, key, val) ->
  if not T.validate(val):
    throw new Error(`Value assigned to '${key}' must be of type '${T.name}', was of type '${typeOf(val).name}'`)

objectConversionState() -> {
  seen(x) -> this.map?.get(x)
  remember(x, val): void ->
    if not this.map: this.map = new Map()
    this.map.set(x, val)
}

// Convert to plain object
export toPlainObject(x) ->
  T = typeFrom(typeOf(x))
  state = objectConversionState()
  T.toPlainObject(x, state)
