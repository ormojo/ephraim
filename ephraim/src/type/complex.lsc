import { Type } from './type'
import { observedPrimitivesSymbol } from '../observe'

import createSubject from 'observable-utils/lib/createSubject'

isEmpty(obj) ->
  Object.keys(obj).length == 0

createNonConstSetterMethod(T, key) ->
  (val): void ->
    curVal = this[key]
    // noop
    if val == curVal: return
    // Mandatory typechecks
    T.checkAssignment(key, val)
    this.__data[key] = val
    // Flag as delta
    if this.__isDelta:
      let delta = this.__delta
      if not delta:
        now delta = {}
        this.__delta = delta
      delta[key] = true
    // Fire observers
    this[observedPrimitivesSymbol]?[key]?.next(this)

createConstSetterMethod(T, key) ->
  (val): void ->
    if this.__data.hasOwnProperty(key):
      throw new Error(`Illegal assignment to constant field '${key}'`)
    // Mandatory typechecks
    T.checkAssignment(key, val)
    this.__data[key] = val
    // Flag as delta
    if this.__isDelta:
      let delta = this.__delta
      if not delta:
        now delta = {}
        this.__delta = delta
      delta[key] = true
    // Fire observers
    this[observedPrimitivesSymbol]?[key]?.next(this)

export class ComplexType extends Type:
  constructor(name) ->
    super(name)

  createSetterMethod(key, spec) ->
    if spec.constant:
      createConstSetterMethod(this, key, spec)
    else:
      createNonConstSetterMethod(this, key, spec)

  createGetterMethod(key) ->
    () ->
      this.__data[key]

  getPropertyDescriptor(key, spec) -> {
    configurable: true
    enumerable: true
    get: this.createGetterMethod(key, spec)
    set: this.createSetterMethod(key, spec)
  }

  // TODO: dedupe?
  getObservableForField(ent, k) ->
    // Get from cache
    let observedPrimitives = ent[observedPrimitivesSymbol]
    if not observedPrimitives:
      now observedPrimitives = ent[observedPrimitivesSymbol] = {}
    let observable = observedPrimitives[k]
    if observable: return observable

    // Create.
    // Primitive observable, when unsubbed, deletes itself, and then
    // the whole observedPrimitives key if empty
    now observable = createSubject({
      onObserversChanged(observers, added, removed) ->
        if removed and observers.length == 0:
          delete ent[observedPrimitivesSymbol][k]
          if ent[observedPrimitivesSymbol]~isEmpty!:
            ent[observedPrimitivesSymbol] = undefined
    })
    observedPrimitives[k] = observable

