import { typeSymbol, Type, PrimitiveType } from './type'

export isPrimitiveType(type): boolean ->
  type[typeSymbol] instanceof PrimitiveType

export _setType(ent, T) ->
  ent[typeSymbol] = T

// Obtain type from a typish thing. For types, this is identity.
// For constructors, this returns the associated ephraim type.
export typeFrom(x) ->
  x[typeSymbol]

// Determine if something is typish
export isType(x): boolean ->
  t = typeof x
  (t == "function" or t == "object") and (x[typeSymbol] instanceof Type)

// Determine if x is-a instance of Type.
export isa(x, ty): boolean ->
  now ty = ty[typeSymbol]
  if ty: ty.validate(x) else: false

export isKindOf(T1, T2): boolean ->
  T1[typeSymbol].isKindOf(T2[typeSymbol])
